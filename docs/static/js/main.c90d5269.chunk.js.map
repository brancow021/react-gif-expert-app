{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","evt","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","URL","encodeURI","fetch","RES","json","data","GIFS","map","img","id","title","url","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","console","log","className","src","alt","GifGrid","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMA6CeA,EAxCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAsBzC,OACE,0BAAMC,SAba,SAACC,GACpBA,EAAIC,iBAEDJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OASd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAtBoB,SAACP,GACzBF,EAAcE,EAAIQ,OAAOF,Y,uBCOdG,EAlBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACyCC,UAAUH,GADnD,+DAGII,MAAMF,GAHV,cAGRG,EAHQ,gBAISA,EAAIC,OAJb,uBAINC,EAJM,EAINA,KAEFC,EAAQD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC5B,MAAM,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAVxB,kBAcLL,GAdK,4CAAH,sDC6BEQ,EA1BM,SAAEhB,GAAe,IAAD,EACTd,mBAAS,CACjCqB,KAAM,GACNU,SAAS,IAHwB,mBAC5BC,EAD4B,KACrBC,EADqB,KAuBnC,OAhBAC,qBAAU,WACRrB,EAASC,GACNqB,MAAK,SAAAC,GAEFH,EAAS,CACPZ,KAAMe,EACNL,SAAS,SAMhB,CAACjB,IAIGkB,GCZMK,EAZK,SAAC,GAAsB,IAArBZ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAI/B,OAFAW,QAAQC,IAAId,EAAIC,EAAOC,GAGrB,yBAAKa,UAAY,0CACf,yBAAKC,IAAKd,EAAKe,IAAKhB,IACpB,2BAAIA,KCqBKiB,EAzBC,SAAC,GAAkB,IAAhB7B,EAAe,EAAfA,SAAe,EAEAgB,EAAahB,GAAhCc,EAFmB,EAEzBP,KAAcU,EAFW,EAEXA,QAGrB,OACE,kBAAC,WAAD,KACE,wBAAIS,UAAU,0CAA2C1B,GACxDiB,EAAU,uBAAGS,UAAW,yCAAd,WAAoE,KAE/E,yBAAKA,UAAU,aAEXZ,EAAOL,KAAI,SAACqB,GAAD,OACT,kBAAC,EAAD,iBACMA,EADN,CAEEC,IAAKD,EAAMnB,YCkBVqB,EAlCM,WAAM,MAIW9C,mBAAS,CAAC,qBAJrB,mBAIlB+C,EAJkB,KAINhD,EAJM,KAWzB,OACE,kBAAC,WAAD,KACE,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEIgD,EAAWxB,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACE+B,IAAK/B,EACLA,SAAUA,U,MCpBxBkC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.c90d5269.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\n\nconst AddCategory = ({ setcategories }) => {\n  \n  const [inputValue, setinputValue] = useState('');\n\n\n  const handleInputChange = (evt) => {\n    setinputValue(evt.target.value);\n  }\n  \n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if(inputValue.trim().length > 2){\n      setcategories(cats => [inputValue, ...cats]);\n      setinputValue('');\n    }\n\n  }\n\n  \n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\"\n        value={inputValue}\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\n\nAddCategory.propTypes = {\n  setcategories: PropTypes.func.isRequired\n}\n\n\n\nexport default AddCategory\n\n","const getGifs = async( category ) => {\n  const URL = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=k2boTIiM2GQe51axI4ZrWzgYG3jHdHvh`\n\n  const RES = await fetch(URL);\n  const { data } = await RES.json();\n\n  const GIFS  = data.map(img => {\n    return{\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n    return GIFS;\n}\n\n\nexport default getGifs;","import  { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = ( category ) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n\n  useEffect(() => {\n    getGifs( category )\n      .then(imgs => {\n\n          setState({\n            data: imgs,\n            loading: false\n          })\n          \n      });\n\n  \n  }, [category]) \n\n\n\n  return state;\n}\n\nexport default useFetchGifs\n","import React from 'react'\n\nconst GifGridItem = ({id, title, url}) => {\n  \n  console.log(id, title, url)\n\n  return (\n    <div className = \"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem\n","import React, {Fragment} from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\n\nconst GifGrid = ({ category }) => {\n\n  const {data: images, loading} = useFetchGifs(category);\n\n\n  return (\n    <Fragment>\n      <h3 className=\"card animate__animated animate__fadeIn\">{ category }</h3>\n      {loading ? <p className =\"card animate__animated animate__flash\">Loading</p> : null}\n\n      <div className=\"card-grid\">\n        {\n          images.map((image) => (\n            <GifGridItem \n              {...image}\n              key={image.id}\n            />\n          ))\n        }\n      </div>\n    </Fragment>\n    \n  )\n}\n\nexport default GifGrid\n","import React, { Fragment, useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball' ]\n\n  const [categories, setcategories] = useState(['Naruto Shippuden' ])\n\n\n  // const handleAdd = () => {\n  //   setcategories([...categories, 'Naruto']);\n  // }\n\n  return(\n    <Fragment>\n      <h2>GifExpertApp</h2>\n      <AddCategory setcategories={ setcategories } />\n      <hr/>\n\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid \n              key={category}\n              category={category} />\n          ))\n        }\n      </ol>\n      \n    </Fragment>\n  )\n\n}\n\n\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}